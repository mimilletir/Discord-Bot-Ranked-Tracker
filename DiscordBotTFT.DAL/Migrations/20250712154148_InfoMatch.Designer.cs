// <auto-generated />
using DiscordBotTFT.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DiscordBotTFT.DAL.Migrations
{
    [DbContext(typeof(RiotContext))]
    [Migration("20250712154148_InfoMatch")]
    partial class InfoMatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.MatchInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("championId")
                        .HasColumnType("bigint");

                    b.Property<long>("gameId")
                        .HasColumnType("bigint");

                    b.Property<string>("gameMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("infoId")
                        .HasColumnType("int");

                    b.Property<string>("puuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("server")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("infoId");

                    b.ToTable("MatchInfo");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.MatchInfoDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("MatchInfoDetail");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MatchInfoDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchInfoId")
                        .HasColumnType("int");

                    b.Property<int?>("assists")
                        .HasColumnType("int");

                    b.Property<long>("championId")
                        .HasColumnType("bigint");

                    b.Property<int?>("deaths")
                        .HasColumnType("int");

                    b.Property<int?>("kills")
                        .HasColumnType("int");

                    b.Property<string>("puuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MatchInfoDetailId");

                    b.HasIndex("MatchInfoId");

                    b.ToTable("Participant");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("currentlyInGame")
                        .HasColumnType("bit");

                    b.Property<string>("gameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("puuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("server")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("tagLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("leaguePoints")
                        .HasColumnType("int");

                    b.Property<string>("queueType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("rank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.MatchInfo", b =>
                {
                    b.HasOne("DiscordBotTFT.DAL.Models.MatchInfoDetail", "info")
                        .WithMany()
                        .HasForeignKey("infoId");

                    b.Navigation("info");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Participant", b =>
                {
                    b.HasOne("DiscordBotTFT.DAL.Models.MatchInfoDetail", null)
                        .WithMany("participants")
                        .HasForeignKey("MatchInfoDetailId");

                    b.HasOne("DiscordBotTFT.DAL.Models.MatchInfo", null)
                        .WithMany("participants")
                        .HasForeignKey("MatchInfoId");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Rank", b =>
                {
                    b.HasOne("DiscordBotTFT.DAL.Models.Profile", null)
                        .WithMany("ranks")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.MatchInfo", b =>
                {
                    b.Navigation("participants");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.MatchInfoDetail", b =>
                {
                    b.Navigation("participants");
                });

            modelBuilder.Entity("DiscordBotTFT.DAL.Models.Profile", b =>
                {
                    b.Navigation("ranks");
                });
#pragma warning restore 612, 618
        }
    }
}
